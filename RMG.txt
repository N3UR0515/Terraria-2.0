First prototype ( This algorithm takes averages | This algorithm needs a setter function for the blocks location ):

	std::mt19937 rng(std::random_device{}());
	std::uniform_int_distribution<int> randomY(5, Grid::Height - 1);

	for (int i = 0; i < Grid::Width; i++)
	{
		Block block = Block(Vec2(float(i), float(randomY(rng))), Block::BlockType::Dirt);
		blocks.push_back(block);
	}

	for (int steps = 0; steps < 5; steps++)
	{
		for (int i = 0; i != blocks.size() - 1; i++)
		{
			int distanceY = int(blocks.at(i).GetLocation().y - blocks.at(i + 1).GetLocation().y);
			int NewY = distanceY / 2;

			blocks.at(i + 1).SetLocation(Vec2(blocks.at(i + 1).GetLocation().x, float(NewY + blocks.at(i + 1).GetLocation().y)));
		}
	}



Second Prototype ( This algorithm uses perlin noise ):

#include <cmath>
#include <random>

class Noise
{
public:
	//Perlin Noise
	static float PerlinNoise_1D(float x, float freq, float ampl) // 1 octave!
	{
		float total = 0;

		int frequency = freq;
		int amplitude = ampl;

		total += InterpolatedNoise(x * float(frequency)) * float(amplitude);

		return total;
	}

	static float map(float n, float start1, float start2, float stop1, float stop2)
	{
		return ((n - start1) / (stop1 - start1)) * (stop2 - start2) + start2;
	}
private:
	//Noise
	static float IntNoise(int x)
	{
		x = (x << 13) ^ x;
		return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589)) / 1073741824);
	}

	static float SmoothNoise(float x)
	{
		return IntNoise(int(x)) / 2 + IntNoise(int(x) - 1) / 4 + IntNoise(int(x) + 1) / 4;
	}

	//Interpolation
	static float Cosine_Interpolate(float a, float b, float x)
	{
		float ft = x * 3.1415927f;
		float f = (1 - cos(ft)) * 0.5f;

		return  a * (1 - f) + b * f;
	}

	static float InterpolatedNoise(float x)
	{
		int integer_X = int(x);
		float fractional_X = x - integer_X;

		float v1 = SmoothNoise(float(integer_X));
		float v2 = SmoothNoise(float(integer_X + 1));

		return Cosine_Interpolate(v1, v2, fractional_X);
	}
};